// Prisma Schema for WhatsApp Gateway PaaS Backend
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User Model - Core user management
model User {
    id           String    @id @default(uuid())
    email        String    @unique
    passwordHash String    @map("password_hash")
    role         UserRole  @default(CUSTOMER)
    tier         UserTier  @default(FREE)
    apiKey       String    @unique @map("api_key")
    isActive     Boolean   @default(true) @map("is_active")
    lastLoginAt  DateTime? @map("last_login_at")
    createdAt    DateTime  @default(now()) @map("created_at")
    updatedAt    DateTime  @updatedAt @map("updated_at")

    // Relationships
    sessions Session[]
    apiKeys  ApiKey[]
    webhooks Webhook[]

    @@map("users")
}

// Session Model - WhatsApp session management
model Session {
    id          String        @id
    userId      String        @map("user_id")
    workerId    String?       @map("worker_id")
    name        String
    phoneNumber String?       @map("phone_number")
    status      SessionStatus @default(INITIALIZING)
    qrCode      String?       @map("qr_code")
    lastSeenAt  DateTime?     @map("last_seen_at")
    createdAt   DateTime      @default(now()) @map("created_at")
    updatedAt   DateTime      @updatedAt @map("updated_at")

    // Relationships
    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    worker   Worker?   @relation(fields: [workerId], references: [id])
    messages Message[]
    apiKeys  ApiKey[]

    @@map("sessions")
}

// Worker Model - Worker node management
model Worker {
    id            String       @id
    endpoint      String       @unique
    status        WorkerStatus @default(ONLINE)
    sessionCount  Int          @default(0) @map("session_count")
    maxSessions   Int          @default(50) @map("max_sessions")
    cpuUsage      Float        @default(0) @map("cpu_usage")
    memoryUsage   Float        @default(0) @map("memory_usage")
    lastHeartbeat DateTime     @default(now()) @map("last_heartbeat")
    description   String?      @map("description")
    createdAt     DateTime     @default(now()) @map("created_at")
    updatedAt     DateTime     @updatedAt @map("updated_at")

    // Relationships
    sessions Session[]
    metrics  WorkerMetric[]

    @@map("workers")
}

// ApiKey Model - API key management for external access
model ApiKey {
    id        String    @id @default(uuid())
    key       String    @unique
    userId    String    @map("user_id")
    sessionId String?   @map("session_id")
    name      String
    isActive  Boolean   @default(true) @map("is_active")
    lastUsed  DateTime? @map("last_used")
    createdAt DateTime  @default(now()) @map("created_at")
    expiresAt DateTime? @map("expires_at")

    // Relationships
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    session Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

    @@map("api_keys")
}

// Message Model - Message logging and history
model Message {
    id           String           @id @default(uuid())
    sessionId    String           @map("session_id")
    direction    MessageDirection
    fromNumber   String?          @map("from_number")
    toNumber     String           @map("to_number")
    messageType  MessageType      @map("message_type")
    content      String
    mediaUrl     String?          @map("media_url")
    filename     String?          @map("filename")
    caption      String?          @map("caption")
    status       MessageStatus    @default(PENDING)
    errorMessage String?          @map("error_message")
    sentAt       DateTime?        @map("sent_at")
    deliveredAt  DateTime?        @map("delivered_at")
    readAt       DateTime?        @map("read_at")
    createdAt    DateTime         @default(now()) @map("created_at")

    // Relationships
    session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

    @@map("messages")
}

// WorkerMetric Model - Worker performance metrics
model WorkerMetric {
    id           String   @id @default(uuid())
    workerId     String   @map("worker_id")
    cpuUsage     Float    @map("cpu_usage")
    memoryUsage  Float    @map("memory_usage")
    sessionCount Int      @map("session_count")
    messageCount Int      @map("message_count")
    uptime       Int      @default(0) @map("uptime") // in seconds
    timestamp    DateTime @default(now())

    // Relationships
    worker Worker @relation(fields: [workerId], references: [id], onDelete: Cascade)

    @@map("worker_metrics")
}

// Webhook Model - Webhook configuration for external notifications
model Webhook {
    id           String    @id @default(uuid())
    userId       String    @map("user_id")
    url          String
    events       String[]  @map("events") // JSON array of event types
    secret       String?   @map("secret")
    isActive     Boolean   @default(true) @map("is_active")
    lastDelivery DateTime? @map("last_delivery")
    failureCount Int       @default(0) @map("failure_count")
    createdAt    DateTime  @default(now()) @map("created_at")
    updatedAt    DateTime  @updatedAt @map("updated_at")

    // Relationships
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("webhooks")
}

// WebhookDelivery Model - Webhook delivery tracking
model WebhookDelivery {
    id           String        @id @default(uuid())
    webhookId    String        @map("webhook_id")
    event        String        @map("event")
    payload      String        @map("payload") // JSON payload
    status       WebhookStatus @default(PENDING)
    responseCode Int?          @map("response_code")
    responseBody String?       @map("response_body")
    attempts     Int           @default(0) @map("attempts")
    nextRetry    DateTime?     @map("next_retry")
    createdAt    DateTime      @default(now()) @map("created_at")
    deliveredAt  DateTime?     @map("delivered_at")

    @@map("webhook_deliveries")
}

// SystemLog Model - System audit and error logging
model SystemLog {
    id        String   @id @default(uuid())
    level     LogLevel @map("level")
    service   String   @map("service")
    message   String   @map("message")
    details   String?  @map("details") // JSON details
    userId    String?  @map("user_id")
    sessionId String?  @map("session_id")
    workerId  String?  @map("worker_id")
    timestamp DateTime @default(now())

    @@map("system_logs")
}

// Enums
enum UserRole {
    CUSTOMER
    ADMIN
}

enum UserTier {
    FREE
    PRO
    PREMIUM
}

enum SessionStatus {
    INITIALIZING
    QR_READY
    CONNECTED
    DISCONNECTED
    ERROR
}

enum WorkerStatus {
    ONLINE
    OFFLINE
    MAINTENANCE
}

enum MessageDirection {
    INBOUND
    OUTBOUND
}

enum MessageType {
    TEXT
    IMAGE
    DOCUMENT
    AUDIO
    VIDEO
    STICKER
    LOCATION
    CONTACT
}

enum MessageStatus {
    PENDING
    SENT
    DELIVERED
    READ
    FAILED
}

enum WebhookStatus {
    PENDING
    DELIVERED
    FAILED
    RETRYING
}

enum LogLevel {
    ERROR
    WARN
    INFO
    DEBUG
}
